[gd_scene load_steps=23 format=3 uid="uid://b2f8i8ahboj1v"]

[ext_resource type="Texture2D" uid="uid://d2tafby3ekcpa" path="res://Assets/Lights/light_nopix.png" id="1_64cxn"]
[ext_resource type="Texture2D" uid="uid://c3p7h2vn4tqsn" path="res://Assets/Prototyping/circle.png" id="1_gpbri"]
[ext_resource type="Shader" path="res://Resources/Shaders/CelShader.gdshader" id="2_oj4md"]
[ext_resource type="Texture2D" uid="uid://buvp2wh82u6kk" path="res://Assets/Sprites/Actors/Rose/Movement/Idle.png" id="3_s23yc"]
[ext_resource type="Texture2D" uid="uid://b66y26pvs7dgk" path="res://Assets/Prototyping/hirescirclenormal.png" id="4_ck8p4"]
[ext_resource type="Texture2D" uid="uid://d1ntbivh88bv8" path="res://Assets/Sprites/Actors/Rose/Movement/Idle_n.png" id="4_segv1"]
[ext_resource type="Texture2D" uid="uid://cra5omxkkutma" path="res://Assets/Sprites/Actors/Enemies/Woodeater_Worker/idle.png" id="5_d4okt"]
[ext_resource type="Texture2D" uid="uid://c08xjrxrmysma" path="res://Assets/Sprites/Actors/Enemies/Woodeater_Worker/idle_n.png" id="6_4f02k"]
[ext_resource type="Texture2D" uid="uid://dpxqwtx2yp7e7" path="res://Assets/Sprites/Actors/Enemies/Woodeater_Worker/idle_spec.png" id="7_smafd"]
[ext_resource type="Texture2D" uid="uid://crqdup41rh3am" path="res://Assets/Sprites/Actors/Rose/Movement/Idle_Spec.png" id="7_ucqps"]

[sub_resource type="Animation" id="Animation_q30np"]
resource_name = "New Anim"
length = 6.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Node2d:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 6),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 6.28319]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("DirectionalLight2d:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 6),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 6.28319]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/path = NodePath("Camera2d:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 3, 6),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(0, 250), Vector2(0, -250), Vector2(0, 250)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Node2d/PointLight2d:position")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.5125, 1.0125, 1.5125, 1.9875, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector2(70, 0), Vector2(35, 0), Vector2(70, 0), Vector2(35, 0), Vector2(70, 0), Vector2(35, 0), Vector2(70, 0), Vector2(35, 0), Vector2(70, 0), Vector2(35, 0), Vector2(70, 0), Vector2(35, 0), Vector2(70, 0)]
}

[sub_resource type="Animation" id="Animation_kukfp"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Node2d:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("DirectionalLight2d:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Camera2d:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Node2d/PointLight2d:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(35, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_mbdq4"]
_data = {
"New Anim": SubResource("Animation_q30np"),
"RESET": SubResource("Animation_kukfp")
}

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_qet0y"]
polygon = PackedVector2Array(-4, -17, 1, -17, 0, 19, -5, 19)

[sub_resource type="Shader" id="Shader_wat1m"]
code = "shader_type canvas_item;

uniform vec3 cameraPosition = vec3(0.0f);
// Setting a color difference between unlit and specular.
uniform float shadowSubtract = 0.5f;
uniform vec4 unlitColorMix : source_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float unlitColorControl = 0.5f;

void fragment()
{
	vec4 spec = texture(SPECULAR_SHININESS_TEXTURE, UV);
	vec4 col = texture(TEXTURE, UV);
	if(spec.g < 0.5f)
	{
		//COLOR = vec4(col.r - specularAdd, col.g - specularAdd, col.b - specularAdd, col.a);
	}
}

void light() {
    // Calculate the real position of this pixel in 3d space, taking into account
    // the rotation and scale of the model. It's a useful formula for some effects.
    // This could also be done in the vertex shader
    vec3 worldPosition = FRAGCOORD.xyz;

    // Calculate the normal including the model rotation and scale
    vec3 worldNormal = NORMAL.xyz;
	vec3 lightVector = normalize( LIGHT_POSITION - worldPosition );
    vec3 cameraVector = normalize(LIGHT_POSITION - cameraPosition - worldPosition );
	if( LIGHT_IS_DIRECTIONAL) {
		lightVector = LIGHT_DIRECTION;
		cameraVector = LIGHT_DIRECTION;
	}

    
	vec4 finalColor = (texture(TEXTURE, UV) + LIGHT_COLOR) / 2.0f;
	
    //Substracting the difference from the main color for the shaded part
    vec4 unlitColor = vec4(finalColor.x - shadowSubtract, finalColor.y - shadowSubtract, finalColor.z - shadowSubtract, 1);
    unlitColor = mix(unlitColor, unlitColorMix, unlitColorControl);
    // Adding the difference from the main color for the highlighted part vec4(finalColor.x + specularAdd, finalColor.y + specularAdd, finalColor.z + specularAdd, 1)
    vec4 specularColor = (SPECULAR_SHININESS + LIGHT_COLOR) / 2.0f;

    // An example simple lighting effect, taking the dot product of the normal
    // (which way this pixel is pointing) and a user generated light position
    float brightness = dot( worldNormal, lightVector );
    
    vec3 reflectance = normalize(2.0 * dot(lightVector,worldNormal)*worldNormal-lightVector);

	//vec4 shadowColor = unlitColor
    
    if(dot(lightVector,worldNormal)<0.3){
        LIGHT = unlitColor;
    } else {
        if (dot(worldNormal,lightVector)>0.0){
            LIGHT = finalColor;
            if (length(cameraVector - reflectance)<0.6){
					if (SPECULAR_SHININESS.r > 0.01){
						LIGHT = specularColor;
					}
            }
        }
    }
	//SHADOW_MODULATE = vec4(edgeColor);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_c84ad"]
shader = SubResource("Shader_wat1m")
shader_parameter/cameraPosition = Vector3(0, 0, 0)
shader_parameter/shadowSubtract = 0.5
shader_parameter/unlitColorControl = 0.5
shader_parameter/unlitColorMix = Color(0, 0, 0, 1)

[sub_resource type="CanvasTexture" id="CanvasTexture_ti12f"]
diffuse_texture = ExtResource("3_s23yc")
normal_texture = ExtResource("4_segv1")
specular_texture = ExtResource("7_ucqps")

[sub_resource type="Shader" id="Shader_15m3t"]
code = "shader_type canvas_item;

uniform vec3 cameraPosition = vec3(0.0f);
// Setting a color difference between unlit and specular.
uniform float shadowSubtract = 0.5f;
uniform vec4 unlitColorMix : source_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float unlitColorControl = 0.5f;

void fragment()
{
	vec4 spec = texture(SPECULAR_SHININESS_TEXTURE, UV);
	vec4 col = texture(TEXTURE, UV);
	if(spec.g < 0.5f)
	{
		//COLOR = vec4(col.r - specularAdd, col.g - specularAdd, col.b - specularAdd, col.a);
	}
}

void light() {
    // Calculate the real position of this pixel in 3d space, taking into account
    // the rotation and scale of the model. It's a useful formula for some effects.
    // This could also be done in the vertex shader
    vec3 worldPosition = FRAGCOORD.xyz;

    // Calculate the normal including the model rotation and scale
    vec3 worldNormal = NORMAL.xyz;
	vec3 lightVector = normalize( LIGHT_POSITION - worldPosition );
    vec3 cameraVector = normalize(LIGHT_POSITION - cameraPosition - worldPosition );
	if( LIGHT_IS_DIRECTIONAL) {
		lightVector = LIGHT_DIRECTION;
		cameraVector = LIGHT_DIRECTION;
	}

    
	vec4 finalColor = (texture(TEXTURE, UV) + LIGHT_COLOR) / 2.0f;
	
    //Substracting the difference from the main color for the shaded part
    vec4 unlitColor = vec4(finalColor.x - shadowSubtract, finalColor.y - shadowSubtract, finalColor.z - shadowSubtract, 1);
    unlitColor = mix(unlitColor, unlitColorMix, unlitColorControl);
    // Adding the difference from the main color for the highlighted part vec4(finalColor.x + specularAdd, finalColor.y + specularAdd, finalColor.z + specularAdd, 1)
    vec4 specularColor = (SPECULAR_SHININESS + LIGHT_COLOR) / 2.0f;

    // An example simple lighting effect, taking the dot product of the normal
    // (which way this pixel is pointing) and a user generated light position
    float brightness = dot( worldNormal, lightVector );
    
    vec3 reflectance = normalize(2.0 * dot(lightVector,worldNormal)*worldNormal-lightVector);

	//vec4 shadowColor = unlitColor
    
    if(dot(lightVector,worldNormal)<0.3){
        LIGHT = unlitColor;
    } else {
        if (dot(worldNormal,lightVector)>0.0){
            LIGHT = finalColor;
            if (length(cameraVector - reflectance)<0.6){
					if (SPECULAR_SHININESS.r > 0.01){
						LIGHT = specularColor;
					}
            }
        }
    }
	//SHADOW_MODULATE = vec4(edgeColor);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ylchl"]
shader = SubResource("Shader_15m3t")
shader_parameter/cameraPosition = Vector3(0, 0, 0)
shader_parameter/shadowSubtract = 0.5
shader_parameter/unlitColorControl = 0.5
shader_parameter/unlitColorMix = Color(0.223529, 0, 0, 1)

[sub_resource type="CanvasTexture" id="CanvasTexture_t3x1h"]
diffuse_texture = ExtResource("5_d4okt")
normal_texture = ExtResource("6_4f02k")
specular_texture = ExtResource("7_smafd")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_84ygb"]
shader = ExtResource("2_oj4md")
shader_parameter/cameraPosition = Vector3(0, 0, 0)
shader_parameter/shadowSubtract = 0.5
shader_parameter/unlitColorControl = null
shader_parameter/unlitColorMix = null

[sub_resource type="CanvasTexture" id="CanvasTexture_7wuxo"]
diffuse_texture = ExtResource("1_gpbri")
normal_texture = ExtResource("4_ck8p4")

[node name="TestShader" type="Node2D"]

[node name="CanvasModulate" type="CanvasModulate" parent="."]
light_mask = 0
color = Color(0.5, 0.5, 0.5, 1)

[node name="DirectionalLight2d" type="DirectionalLight2D" parent="."]
color = Color(0, 0, 0, 1)
range_item_cull_mask = 1023
shadow_color = Color(0, 0, 0, 1)
shadow_item_cull_mask = 1023
height = 0.5

[node name="Node2d" type="Node2D" parent="."]
visible = false

[node name="PointLight2d" type="PointLight2D" parent="Node2d"]
position = Vector2(35, 0)
rotation = 0.0155062
color = Color(0, 0, 0, 1)
range_item_cull_mask = 2
texture = ExtResource("1_64cxn")
height = 25.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_mbdq4")
}

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
z_index = -1
occluder = SubResource("OccluderPolygon2D_qet0y")

[node name="rose sprite" type="Sprite2D" parent="."]
light_mask = 2
material = SubResource("ShaderMaterial_c84ad")
z_index = 9
texture = SubResource("CanvasTexture_ti12f")
hframes = 5

[node name="baccamite sprite" type="Sprite2D" parent="."]
light_mask = 2
material = SubResource("ShaderMaterial_ylchl")
scale = Vector2(-1, 1)
z_index = 9
texture = SubResource("CanvasTexture_t3x1h")
hframes = 3

[node name="Sprite2d" type="Sprite2D" parent="."]
light_mask = 2
material = SubResource("ShaderMaterial_84ygb")
texture = SubResource("CanvasTexture_7wuxo")

[node name="Camera2d" type="Camera2D" parent="."]
current = true
